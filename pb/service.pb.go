// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	service.proto
	msg_public.proto
	msg_base.proto
	msg.proto
	msg_id_cli2ser.proto
	msg_id_ser2cli.proto
	msg_id_ser2ser.proto
	msg_player.proto
	msg_config.proto
	msg_fight.proto
	msg_old.proto
	msg_server.proto
	msg_cfg_auto.proto

It has these top-level messages:
	SrvMsg
	MsgInt
	MsgUint
	MsgBigInt
	MsgStr
	MsgBool
	MsgFloat
	MsgKeyValue
	MsgKeyValueU
	MsgStrKeyValue
	MsgStrKeyValueArray
	MsgBoolKeyValue
	MsgIntArrary
	MsgStringArray
	MsgKeyExchange
	MsgHeartBeat
	MsgGameHeartBeat
	MsgGameRoles
	MsgFtHeartBeat
	MsgGtHeartBeat
	MsgForwardToRole
	MsgROnOffLine
	MsgAccInfo
	MsgLogin
	MsgReLogin
	MsgLoginAck
	MsgLoadRole
	MsgReConn
	CPriceItem
	MsgMail
	MsgMailData
	MsgMailProto
	MsgHero
	MsgItem
	MsgHeroUpReq
	MsgHeroStarUpReq
	MsgHeroPinJieUpReq
	MsgHeroProto
	MsgFBHistroy
	MsgFBData
	MsgFormation
	MsgRankListData
	MsgRankListPack
	MsgRanklistHandle
	MsgPlayerData
	MsgLoginForCli
	MsgReConnFtAck
	MsgLoadDataAck
	MsgOriginalCfgs
	MsgTableCfg
	MsgBytesCfg
	MsgCfgBase
	MsgAwardCell
	MsgFighter
	MsgFighterCli
	MsgRoleInFight
	MsgRegionInfo
	MsgBattleStartData
	MsgBattleFinishData
	MsgBattleYouLost
	MsgBattleCreateByRoom
	MsgBattleCreateReq
	MsgBattleCreateAck
	MsgBattleReConnectReq
	MsgBattleReConnectAck
	MsgBattleEnterReq
	MsgBattleEnterAck
	MsgBattleLeaveReq
	MsgBattleLeaveAck
	MsgBattleStart
	MsgBattleFinish
	MsgBattlePhySync
	MsgBattleScript
	MsgBattleScriptList
	MsgBattleMonsterAI
	MsgBattleMonster
	MsgBattleMonsterCreate
	MsgBattleTriggerEnter
	MsgBattleAreaScriptStart
	MsgBattleAreaScriptFinish
	MsgBattleDebugDamage
	MsgFighterStateEvent
	MsgGMTask
	MsgCfgGiftData
	MsgGiftChannelGroup
	MsgRankListCfg
	MsgMonsterCfg
	MsgFBCfg
	MsgItemCfg
	MsgHeroCfg
	MsgHeroLevelCfg
	MsgHeroPinJieCfg
	MsgHeroStarCfg
	MsgRegionList
	MsgSpecialItemCfg
	MsgTripAward
	MsgDBCfg
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SrvMsg struct {
	ID  uint32 `protobuf:"varint,2,opt,name=ID,json=iD" json:"ID,omitempty"`
	Msg []byte `protobuf:"bytes,3,opt,name=Msg,json=msg,proto3" json:"Msg,omitempty"`
}

func (m *SrvMsg) Reset()                    { *m = SrvMsg{} }
func (m *SrvMsg) String() string            { return proto.CompactTextString(m) }
func (*SrvMsg) ProtoMessage()               {}
func (*SrvMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SrvMsg) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SrvMsg) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func init() {
	proto.RegisterType((*SrvMsg)(nil), "pb.SrvMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SrvService service

type SrvServiceClient interface {
	SrvSrv(ctx context.Context, opts ...grpc.CallOption) (SrvService_SrvSrvClient, error)
}

type srvServiceClient struct {
	cc *grpc.ClientConn
}

func NewSrvServiceClient(cc *grpc.ClientConn) SrvServiceClient {
	return &srvServiceClient{cc}
}

func (c *srvServiceClient) SrvSrv(ctx context.Context, opts ...grpc.CallOption) (SrvService_SrvSrvClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SrvService_serviceDesc.Streams[0], c.cc, "/pb.SrvService/SrvSrv", opts...)
	if err != nil {
		return nil, err
	}
	x := &srvServiceSrvSrvClient{stream}
	return x, nil
}

type SrvService_SrvSrvClient interface {
	Send(*SrvMsg) error
	Recv() (*SrvMsg, error)
	grpc.ClientStream
}

type srvServiceSrvSrvClient struct {
	grpc.ClientStream
}

func (x *srvServiceSrvSrvClient) Send(m *SrvMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *srvServiceSrvSrvClient) Recv() (*SrvMsg, error) {
	m := new(SrvMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SrvService service

type SrvServiceServer interface {
	SrvSrv(SrvService_SrvSrvServer) error
}

func RegisterSrvServiceServer(s *grpc.Server, srv SrvServiceServer) {
	s.RegisterService(&_SrvService_serviceDesc, srv)
}

func _SrvService_SrvSrv_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SrvServiceServer).SrvSrv(&srvServiceSrvSrvServer{stream})
}

type SrvService_SrvSrvServer interface {
	Send(*SrvMsg) error
	Recv() (*SrvMsg, error)
	grpc.ServerStream
}

type srvServiceSrvSrvServer struct {
	grpc.ServerStream
}

func (x *srvServiceSrvSrvServer) Send(m *SrvMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *srvServiceSrvSrvServer) Recv() (*SrvMsg, error) {
	m := new(SrvMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SrvService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SrvService",
	HandlerType: (*SrvServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SrvSrv",
			Handler:       _SrvService_SrvSrv_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 124 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xd2, 0xe2,
	0x62, 0x0b, 0x2e, 0x2a, 0xf3, 0x2d, 0x4e, 0x17, 0xe2, 0xe3, 0x62, 0xf2, 0x74, 0x91, 0x60, 0x52,
	0x60, 0xd4, 0xe0, 0x0d, 0x62, 0xca, 0x74, 0x11, 0x12, 0xe0, 0x62, 0xf6, 0x2d, 0x4e, 0x97, 0x60,
	0x56, 0x60, 0xd4, 0xe0, 0x09, 0x62, 0xce, 0x2d, 0x4e, 0x37, 0x32, 0xe2, 0xe2, 0x0a, 0x2e, 0x2a,
	0x0b, 0x86, 0x98, 0x21, 0xa4, 0x02, 0xd6, 0x19, 0x5c, 0x54, 0x26, 0xc4, 0xa5, 0x57, 0x90, 0xa4,
	0x07, 0x31, 0x45, 0x0a, 0x89, 0xad, 0xc1, 0x68, 0xc0, 0x98, 0xc4, 0x06, 0xb6, 0xca, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0xce, 0x48, 0xca, 0xd8, 0x7b, 0x00, 0x00, 0x00,
}
